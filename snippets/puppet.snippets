# #!/bin/zsh
snippet [
	[ ${1} ]
snippet '
	'${1}'
snippet "
	"${1}"
snippet {
	{ ${1} }
snippet notify
	notify { "${1:title}":
	  message => "${2:$1}",
	}
snippet user
	user { '${1:nobody}':
	  ensure     => ${2:present},
	  home       => '${3:/var/lib/$1}',
	  uid        => ${4:333},
	  gid        => ${5:$4},
	  comment    => '${6:$1 account}',
	  membership => ${7:minimum},
	  password   => '!!',
	  shell      => '${8:/bin/bash}',
	}
snippet define
	# Define: ${1:mydefinedtype}
	#
	#   ${2:defined type description goes here.}
	#
	# Parameters:
	#
	# Actions:
	#
	# Requires:
	#
	# Sample Usage:
	#
	define $1($3) {
	  ${4:# statements}
	}
	# EOF
snippet #!
	#! /usr/bin/env puppet

snippet if
	if (${1:condition}) {
	  ${2:# statements}
	}
snippet case
	case $::osfamily {
	  redhat: {
	    notify { "$module_name supported": }
	  }
	  default: {
	    $msg = "OS Family: [${osfamily}] is not implemented"
	    # Master side warning
	    warning $msg
	    # Agent side notification
	    notify { "$module_name unimplemented": message => $msg }
	  }
	}
snippet class
	# == Class: ${1:myclass}
	#
	# ${2:Full description of class bind here.}
	#
	# === Parameters
	#
	# Document parameters here.
	#
	# [*sample_parameter*]
	#   Explanation of what this parameter affects and what it defaults to.
	#   e.g. "Specify one or more upstream ntp servers as an array."
	#
	# === Variables
	#
	# Here you should define a list of variables that this module would require.
	#
	# [*sample_variable*]
	#   Explanation of how this variable affects the function of this class and if it
	#   has a default. e.g. "The parameter enc_ntp_servers must be set by the
	#   External Node Classifier as a comma separated list of hostnames." (Note,
	#   global variables should not be used in preference to class parameters  as of
	#   Puppet 2.6.)
	#
	# === Examples
	#
	#  class { $1:
	#    servers => [ 'pool.ntp.org', 'ntp.local.company.com' ]
	#  }
	#
	# === Authors
	#
	# Jeff McCune <jeff@puppetlabs.com>
	#
	# === Copyright
	#
	# Copyright 2013 Jeff McCune, unless otherwise noted.
	#
	class $1 {
	  notify { "FIXME: ${module_name} unimplemented": }
	  ${3:# statements}
	}
snippet class::
	# Class: ${1:parentclass}::${2:myclass}
	#
	#   ${3:class description goes here}
	#
	# Parameters:
	#
	# Actions:
	#
	# Requires:
	#
	# Sample Usage:
	#
	class $1::$2 inherits $1 {
	  $module = "$1"
	  $class  = "${module}::$2"
	  notify { "FIXME: ${class} unimplemented": }
	  ${4:# statements}
	}
snippet File
	File {
	  owner => '${1:0}',
	  group => '${2:$1}',
	  mode  => '${3:0644}',
	}
snippet file
	file { '${1:/dev/null}':
	    source  => "puppet:///modules/${module}${2:$1}",
	    recurse => "${3:false}"
	}
snippet :
	'${1:title}':${2}
snippet >
	${1:attribute} => ${2:value},${3}
snippet rsa Paste your RSA public key.
	`system("cat ~/.ssh/id_rsa.pub")`
snippet ssh ssh_authorized_key resource declaration
	ssh_authorized_key { '${1:`system("whoami")`}':
	  ensure  => present,
	  key     => "${2:${rsa_key}}",
	  name    => '${3:`system("git config user.email")`}',
	  type    => ssh-rsa,
	  options => undef,
	  target  => undef,
	  user    => '${4:`system("whoami")`}',
	}
snippet host host resource declaration
	host { '${1:`system("hostname")`}':
	  ensure       => present,
	  ip           => ${2:$ipaddress},
	  name         => '${3:$1}',
	  host_aliases => [ "${4:`system("hostname -s")`}", ],
	}
snippet node default node definition
	node default {
	  notify { 'alpha': } ->
	  class  { '${1:module}': } ->
	  notify { 'omega': }
	}
snippet anchor resources for the anchor pattern
	# The Anchor Pattern is to work around Puppet issue 8040
	# More information at: http://links.puppetlabs.com/anchor_pattern
	anchor { "${1:module_name}::begin": }
	anchor { "${2:$1}::end": }
snippet registry_key resources for managing a registry_key
	registry_key { "${1:HKLM\\Software\\Vendor\\Puppet Labs}":
	  ensure => present,
	  purge  => false,
	}
snippet registry_value resources for managing a registry_value
	registry_value { "${1:HKLM\\Software\\Vendor\\Puppet Labs\\Value1}":
	  ensure => present,
	  type   => ${2:string},
	  data   => "${3:foo}",
	}

